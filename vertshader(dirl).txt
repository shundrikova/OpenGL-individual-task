#version 330 core

layout(location = 0) in vec3 position;
layout(location = 1) in vec3 normal;
layout(location = 2) in vec2 texcoord;

uniform struct Transform {
	mat4 model;
	mat4 viewProjection;
	mat4 normal;
	vec3 viewPosition;
} transform;

uniform struct PointLightD
{
	vec4 direction;
	vec4 ambient;
	vec4 diffuse;
	vec4 specular;	
} light;

out Vertex {
	vec2 texcoord;
	//Нормаль к поверхности объекта в вершине в мировой системе координат
	vec3 normal;
	//Направление падающего света, от вершины к источнику освещения
	vec3 lightDir;
	//Направление взгляда, от вершины к наблюдателю в мировой системе координат
	vec3 viewDir;
} Vert;


void main() 
{
  //переведём координаты вершины в мировую систему координат
  vec4 vertex = transform.model * vec4(position,1.0);
  //направление от вершины на источник освещения в мировой системе координат
  vec4 lightDir = light.direction;
  //переводим координаты вершины в однородные
  gl_Position = transform.viewProjection * vertex;
  Vert.texcoord = texcoord;
  // передаём нормаль в мировой системе координат
  Vert.normal = (transform.normal * vec4(normal,1)).xyz;
  //передаём направление на источник освещения
  Vert.lightDir = vec3(lightDir);
  //передаём направление от вершины к наблюдателю в мировой системе координат
  Vert.viewDir = transform.viewPosition - vec3(vertex);
}